name: CI/CD Secure TODO App

on:
  push:
    branches: [ "main" ]
  pull_request:

permissions:
  contents: read
  packages: write
  security-events: write   # to upload SARIF to Code scanning
  id-token: write          # for keyless Cosign signing (OIDC

env:
  IMAGE_NAME: docker.io/${{ secrets.DOCKER_USERNAME }}/todo-app

jobs:
  build-scan-push-sign:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Set up Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 3. Login to Docker Hub (Secrets required: DOCKER_USERNAME, DOCKER_PASSWORD)
      - name: Docker Hub Login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 4. Compute tags
      - name: Set Docker image tags
        id: tags
        run: |
          echo "sha_tag=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT
          echo "date_tag=$(date +'%Y%m%d%H%M')" >> $GITHUB_OUTPUT
          echo "latest_tag=latest" >> $GITHUB_OUTPUT

      # 5. Build & push image (immutable + latest)
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:${{ steps.tags.outputs.sha_tag }}
            ${{ env.IMAGE_NAME }}:${{ steps.tags.outputs.date_tag }}
            ${{ env.IMAGE_NAME }}:latest
          provenance: true  # attach build provenance

      # 6. Trivy vulnerability scan (fail on HIGH/CRITICAL) + SARIF report
      - name: Trivy image scan (SARIF)
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: ${{ env.IMAGE_NAME }}:${{ steps.tags.outputs.sha_tag }}
          format: 'sarif'
          output: 'trivy.sarif'
          vuln-type: 'os,library'
          ignore-unfixed: true
          severity: 'HIGH,CRITICAL'
          exit-code: '0'

      - name: Upload SARIF to Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy.sarif

      # 7. Generate SBOM (SPDX JSON) and upload artifact
      - name: Trivy SBOM (SPDX)
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: ${{ env.IMAGE_NAME }}:${{ steps.tags.outputs.sha_tag }}
          format: 'spdx-json'
          output: 'sbom.spdx.json'
          exit-code: '0'

      - name: Upload SBOM artifact
        uses: actions/upload-artifact@v4
        with:
          name: sbom-spdx
          path: sbom.spdx.json
          if-no-files-found: error

      # 8. Install Cosign
      - name: Install Cosign
        uses: sigstore/cosign-installer@v3

      # 9. Sign images (keyless OIDC)
      - name: Cosign sign images (keyless)
        env:
          COSIGN_EXPERIMENTAL: "1"
        run: |
          for TAG in ${{ steps.tags.outputs.sha_tag }} ${{ steps.tags.outputs.date_tag }} latest; do
            cosign sign --yes ${{ env.IMAGE_NAME }}:$TAG
          done

      # 10. Attest SBOM
      - name: Cosign attest SBOM
        env:
          COSIGN_EXPERIMENTAL: "1"
        run: |
          cosign attest --yes \
            --predicate sbom.spdx.json \
            --type spdx \
            ${{ env.IMAGE_NAME }}:${{ steps.tags.outputs.sha_tag }}

      # 11. Verify signature (optional; tighten identity if you want)
      - name: Verify image signature
        run: |
          for TAG in ${{ steps.tags.outputs.sha_tag }} ${{ steps.tags.outputs.date_tag }} latest; do
            cosign verify ${{ env.IMAGE_NAME }}:$TAG \
              --certificate-oidc-issuer https://token.actions.githubusercontent.com \
              --certificate-identity-regexp "https://github.com/${{ github.repository }}/.github/workflows/.*"
          done
